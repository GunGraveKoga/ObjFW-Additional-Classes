#import <ObjFW/ObjFW.h>
#import "../OFMD2Hash.h"
#import "../OFMD4Hash.h"

static OFString* hashAsString(const uint8_t* digest, Class hashClass) {

  size_t digestSize = [hashClass digestSize];
  char cString[digestSize * 2];

  for (size_t i = 0; i < digestSize; i++) {
    uint8_t high, low;

    high = digest[i] >> 4;
    low  = digest[i] & 0x0F;

    cString[i * 2] = (high > 9 ? high - 10 + 'a' : high + '0');
    cString[i * 2 + 1] = (low > 9 ? low - 10 + 'a' : low + '0');
  }

  return [OFString stringWithCString: cString
          encoding: OF_STRING_ENCODING_ASCII
            length: digestSize * 2];
}

static const char md2_test_str[7][81] =
{
    { "" },
    { "a" },
    { "abc" },
    { "message digest" },
    { "abcdefghijklmnopqrstuvwxyz" },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    { "12345678901234567890123456789012345678901234567890123456789012" \
      "345678901234567890" }
};

static const unsigned char md2_test_sum[7][16] =
{
    { 0x83, 0x50, 0xE5, 0xA3, 0xE2, 0x4C, 0x15, 0x3D,
      0xF2, 0x27, 0x5C, 0x9F, 0x80, 0x69, 0x27, 0x73 },
    { 0x32, 0xEC, 0x01, 0xEC, 0x4A, 0x6D, 0xAC, 0x72,
      0xC0, 0xAB, 0x96, 0xFB, 0x34, 0xC0, 0xB5, 0xD1 },
    { 0xDA, 0x85, 0x3B, 0x0D, 0x3F, 0x88, 0xD9, 0x9B,
      0x30, 0x28, 0x3A, 0x69, 0xE6, 0xDE, 0xD6, 0xBB },
    { 0xAB, 0x4F, 0x49, 0x6B, 0xFB, 0x2A, 0x53, 0x0B,
      0x21, 0x9F, 0xF3, 0x30, 0x31, 0xFE, 0x06, 0xB0 },
    { 0x4E, 0x8D, 0xDF, 0xF3, 0x65, 0x02, 0x92, 0xAB,
      0x5A, 0x41, 0x08, 0xC3, 0xAA, 0x47, 0x94, 0x0B },
    { 0xDA, 0x33, 0xDE, 0xF2, 0xA4, 0x2D, 0xF1, 0x39,
      0x75, 0x35, 0x28, 0x46, 0xC3, 0x03, 0x38, 0xCD },
    { 0xD5, 0x97, 0x6F, 0x79, 0xD8, 0x3D, 0x3A, 0x0D,
      0xC9, 0x80, 0x6C, 0x3C, 0x66, 0xF3, 0xEF, 0xD8 }
};

static const char md4_test_str[7][81] =
{
    { "" },
    { "a" },
    { "abc" },
    { "message digest" },
    { "abcdefghijklmnopqrstuvwxyz" },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    { "12345678901234567890123456789012345678901234567890123456789012" \
      "345678901234567890" }
};

static const unsigned char md4_test_sum[7][16] =
{
    { 0x31, 0xD6, 0xCF, 0xE0, 0xD1, 0x6A, 0xE9, 0x31,
      0xB7, 0x3C, 0x59, 0xD7, 0xE0, 0xC0, 0x89, 0xC0 },
    { 0xBD, 0xE5, 0x2C, 0xB3, 0x1D, 0xE3, 0x3E, 0x46,
      0x24, 0x5E, 0x05, 0xFB, 0xDB, 0xD6, 0xFB, 0x24 },
    { 0xA4, 0x48, 0x01, 0x7A, 0xAF, 0x21, 0xD8, 0x52,
      0x5F, 0xC1, 0x0A, 0xE8, 0x7A, 0xA6, 0x72, 0x9D },
    { 0xD9, 0x13, 0x0A, 0x81, 0x64, 0x54, 0x9F, 0xE8,
      0x18, 0x87, 0x48, 0x06, 0xE1, 0xC7, 0x01, 0x4B },
    { 0xD7, 0x9E, 0x1C, 0x30, 0x8A, 0xA5, 0xBB, 0xCD,
      0xEE, 0xA8, 0xED, 0x63, 0xDF, 0x41, 0x2D, 0xA9 },
    { 0x04, 0x3F, 0x85, 0x82, 0xF2, 0x41, 0xDB, 0x35,
      0x1C, 0xE6, 0x27, 0xE1, 0x53, 0xE7, 0xF0, 0xE4 },
    { 0xE3, 0x3B, 0x4D, 0xDC, 0x9C, 0x38, 0xF2, 0x19,
      0x9C, 0x3E, 0x7B, 0x16, 0x4F, 0xCC, 0x05, 0x36 }
};



int main(int argc, char const *argv[])
{
	
	for (size_t idx = 0; idx < 7; idx++) {
		OFMD2Hash* md = [OFMD2Hash hash];
		[md updateWithBuffer:md2_test_str[idx] length:strlen(md2_test_str[idx])];

		if (memcmp(md2_test_sum[idx], [md digest], [OFMD2Hash digestSize]) != 0) {
			of_log(@"Failed MD2 #%zu test_string:\"%s\"\t hash:\"%@\"", idx + 1, md2_test_str[idx], hashAsString([md digest], [OFMD2Hash class]));
		} else {
			of_log(@"Success MD2 #%zu test_string:\"%s\"\t hash:\"%@\"", idx + 1, md2_test_str[idx], hashAsString([md digest], [OFMD2Hash class]));
		}
	}

	for (size_t idx = 0; idx < 7; idx++) {
		OFMD4Hash* md = [OFMD4Hash hash];
		[md updateWithBuffer:md4_test_str[idx] length:strlen(md4_test_str[idx])];

		if (memcmp(md4_test_sum[idx], [md digest], [OFMD4Hash digestSize]) != 0) {
			of_log(@"Failed MD4 #%zu test_string:\"%s\"\t hash:\"%@\"", idx + 1, md4_test_str[idx], hashAsString([md digest], [OFMD4Hash class]));
		} else {
			of_log(@"Success MD4 #%zu test_string:\"%s\"\t hash:\"%@\"", idx + 1, md4_test_str[idx], hashAsString([md digest], [OFMD4Hash class]));
		}
	}

	return 0;
}